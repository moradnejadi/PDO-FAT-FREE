<?php

namespace moradnejadi\pdofatfree;

use moradnejadi\pdofatfree\DB\SQL\Mapper;

class Instance extends Mapper
{
    // Instantiate mapper
    function __construct(\moradnejadi\pdofatfree\DB\SQL $db, $table = null)
    {
        // This is where the mapper and DB structure synchronization occurs
        parent::__construct($db, $table);
    }

    // Specialized query
    function listByCity()
    {
        return $this->select('tag,title', null, array('order' => 'id DESC'));
        /*
        We could have done the same thing with plain vanilla SQL:
        return $this->db->exec(
            'SELECT vendorID,name,city FROM vendors '.
            'ORDER BY city DESC;'
        );
        */
    }

    /**
     * overwrite insert() method for add "Uid" auto generating column to array insert fields.
     * @return static
     **/
    function insert()
    {
        // check for table have "Uid" column
        if (array_key_exists('id', $this->fields)) {
            //if Yes we add value autoGenerated to Uid column
            $this->fields['id']['value'] = 20;
            $this->fields['id']['changed'] = true;
        }
        // continue inserting process...
        return parent::insert();
    }


    /**
     * This function Generates an Unique ID in System Project
     * @since 6.24.x.x The New GUID Interaction With UIDTable was added to Obtain a New UID
     */
    function newGUID($projectUID, $db, $tableName)
    {

        switch ($this->engine) {
            case "sqlserver":
            case "mssql":
                $GetDateTimeFunction = "getutcdate()";
                break;
            case "mssqldriverforphp":
                $GetDateTimeFunction = "getutcdate()";
                $result = $db->exec('exec sp_tables @TABLE_TYPE = "' . $tableName . '"');
                break;
            case "mysql":
                $GetDateTimeFunction = "UTC_TIMESTAMP()";
                $result = $db->exec('SELECT TABLE_NAME FROM information_schema.TABLES  WHERE table_schema = "' . $db->name() . '" and table_name = "UIDGenerator" ');
                break;
        }


        mt_srand((double)microtime() * 10000);//optional for php 4.2.0 and up.
        $CharID = strtoupper(md5(uniqid(rand(), true)));
        $Hyphen = chr(45);
        $Guid = substr($CharID, 0, 8) . $Hyphen . substr($CharID, 8, 4) . $Hyphen . substr($CharID, 12, 4) . $Hyphen . substr($CharID, 16, 4) . $Hyphen . substr($CharID, 20, 12);


        if (isset($result[0]['table_name'])) {
            $MSSQLUIDInserterQuery = "INSERT INTO UIDGenerator (TableName, CreationDateTime, GUID) VALUES ('$Options[Table]', $GetDateTimeFunction, '$Guid'); INSERT INTO UIDTable (UID, TableName, CreationDateTime, GUID) SELECT CAST('" . $Options['ProjectUID'] . "' + CAST(UID AS VARCHAR) AS BIGINT) AS UID, TableName, CreationDateTime, GUID FROM ___ACTIVE_DBNAME_FOR_CROSSDB_USAGE___.UIDGenerator WHERE TableName = '$Options[Table]' and GUID = '$Guid';";
            $MYSQLUIDInserterQuery = "INSERT INTO UIDGenerator (TableName, CreationDateTime, GUID) VALUES ('$Options[Table]', $GetDateTimeFunction, '$Guid'); INSERT INTO UIDTable (UID, TableName, CreationDateTime, GUID) SELECT CAST('" . $Options['ProjectUID'] . "' + CAST(UID AS CHAR) AS UNSIGNED) AS UID, TableName, CreationDateTime, GUID FROM ___ACTIVE_DBNAME_FOR_CROSSDB_USAGE___.UIDGenerator WHERE TableName = '$Options[Table]' and GUID = '$Guid'";
        } else {
            $MSSQLUIDInserterQuery = "INSERT INTO UIDTable (TableName, CreationDateTime, DeletionDateTime, GUID) values ('$Options[Table]', $GetDateTimeFunction,NULL, '$Guid'); ";
            $MYSQLUIDInserterQuery = "INSERT INTO UIDTable (TableName, CreationDateTime, GUID) VALUES ('$Options[Table]', $GetDateTimeFunction, '$Guid')";
        }
        $MSSQL_UIDRetriever = "SELECT * FROM UIDTable WHERE TableName = {$this->useUnicodeN}'$Options[Table]' and GUID = {$this->useUnicodeN}'$Guid'";
        $MYSQL_UIDRetriever = "SELECT * FROM UIDTable WHERE TableName = {$this->useUnicodeN}'$Options[Table]' and GUID = {$this->useUnicodeN}'$Guid'";




        //INSERT INTO ___ACTIVE_DBNAME_FOR_CROSSDB_USAGE___.UIDGenerator (TableName, CreationDateTime, GUID) VALUES ('$Options[Table]', $GetDateTimeFunction, '$Guid');
        if (in_array($this->DbType, array('mssql', 'sqlserver'))) {
            $new = $this->Query(array("Query" => $MSSQLUIDInserterQuery, 'ContentGroup' => 'SYSTEMIC'));
            $new = $this->SelectData_2(array("Query" => $MSSQL_UIDRetriever, 'ContentGroup' => 'SYSTEMIC'));
            //	if (!$this->CloseTransaction(true, 'NewUID'))
            //	    return false;

            if (!empty($new))
                return $new[0]["UID"];

        } else if ($this->DbType == 'mssqldriverforphp') {
            if ($this->Query(array("Query" => $MSSQLUIDInserterQuery . ($this->DbType != 'mysql' ? ";" . $MSSQL_UIDRetriever : ""), 'ContentGroup' => 'SYSTEMIC'))) {
                $new = $this->SelectData_2(array('Query' => $MSSQL_UIDRetriever, 'ContentGroup' => 'SYSTEMIC'));
                if ($new) {
//					if (!$this->CloseTransaction(true, 'NewUID'))
//						return false;

                    return isset($new["UID"]) ? $new["UID"] : $new[0]["UID"];
                } else {
//					if (!$this->CloseTransaction(false, 'NewUID'))
//						return false;

                    ReturnResult(__FILE__, __LINE__, false);
                }
            } else {
//				if (!$this->CloseTransaction(false, 'NewUID'))
//					return false;

                ReturnResult(__FILE__, __LINE__, false);
            }

        } else if ($this->DbType == 'mysql') {

            if ($this->Query(array("Query" => $MYSQLUIDInserterQuery, 'ContentGroup' => 'SYSTEMIC'))) {
                $new = $this->SelectData_2($MYSQL_UIDRetriever);
                if (!empty($new)) {
//					if (!$this->CloseTransaction(true, 'NewUID'))
//						return false;

                    return isset($new["UID"]) ? $new["UID"] : $new[0]["UID"];
                }
            }
        }

//		if (!$this->CloseTransaction(false, 'NewUID'))
//			return false;

        return ReturnResult(__FILE__, __LINE__, false);
    }


}
